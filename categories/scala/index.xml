<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RedElastic</title>
    <link>http://redelastic.com/categories/scala/index.xml</link>
    <description>Recent content on RedElastic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://redelastic.com/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Play Concurrency: Under the Hood</title>
      <link>http://redelastic.com/blog/play-concurrency</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://redelastic.com/blog/play-concurrency</guid>
      <description>

&lt;p&gt;Play is an MVC framework for the JVM that breaks away from the Servlet standard, which allocates a thread-per-request. Rather, Play embraces a fully reactive programming model through the use of &lt;em&gt;futures&lt;/em&gt; for asynchronous programming and &lt;em&gt;work stealing&lt;/em&gt; for maximizing available threads. Tight integration between Play and Akka also opens up avenues for distribution of work and state across clusters, even clusters that span data centers.&lt;/p&gt;

&lt;p&gt;It is by far the most powerful and flexible MVC framework in the industry.&lt;/p&gt;

&lt;p&gt;Not only does Play has some extreme advantages over Servlet-based MVC frameworks like Spring, it also fully supports two key languages on the JVM: Java and Scala.&lt;/p&gt;

&lt;h2 id=&#34;futures-actors-and-work-stealing&#34;&gt;Futures, actors, and work stealing&lt;/h2&gt;

&lt;p&gt;A combination of &lt;em&gt;futures&lt;/em&gt;, &lt;em&gt;actors&lt;/em&gt;, and &lt;em&gt;work stealing&lt;/em&gt; makes Play one of the most flexible, performant, and resilient MVC frameworks in the industry.&lt;/p&gt;

&lt;p&gt;Play employs &lt;em&gt;futures&lt;/em&gt;, which can be considered a form of event-driven concurrency. This is nothing novel, many frameworks such as Node.js feature event-driven concurrency as well.&lt;/p&gt;

&lt;p&gt;The clever innovation in Play is the use of &lt;em&gt;work stealing&lt;/em&gt;. The combination of work stealing and statelessness make Play scalable in both directions, up and out.&lt;/p&gt;

&lt;p&gt;In order to understand what futures and work stealing bring to the table, we need to start from the bottom and work our way up. All example Play code is written in Scala, although Play also has an excellent API for Java.&lt;/p&gt;

&lt;h3 id=&#34;work-stealing&#34;&gt;Work stealing&lt;/h3&gt;

&lt;p&gt;Work stealing is implemented with the &lt;a href=&#34;JSR-166&#34;&gt;ForkJoin Framework&lt;/a&gt;. It was first added to Java 7 and refined in Java 8. Fork/join makes it more efficient for Java developers to write concurrent/parallel code in Java and avoid the complexities of locks, monitors, and synchronization.&lt;/p&gt;

&lt;p&gt;Let’s explore parallelism as two distinct categories, divide-conquer and work stealing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Divide-conquer&lt;/strong&gt; is the process of taking a long-running computation, splitting it up, and executing both sides of the computation in parallel before joining the results together.  If we apply the same approach recursively, we can continue to divide our work into smaller and smaller halves until the individual tasks become small enough to compute.&lt;/p&gt;

&lt;p&gt;For instance, if we’re summing a list of integers, we can decide that the largest list we want to work with has 1,000 elements. If the original list has 10,000 elements, we first split the list in half, and split those halves in half, and keep splitting until the maximum list size we work with has 1,000 elements. At that point we can execute the tasks in parallel and join the results together.&lt;/p&gt;

&lt;p&gt;Divide-conquer makes efficient use of multi-core processors because creating smaller tasks and handing them off to the runtime makes it easier for the runtime to &lt;em&gt;schedule&lt;/em&gt; the tasks according to the overall capacity of your system. For instance, if the CPU is mostly idle, the tasks can be spread across available cores and run in parallel, whereas if the CPU is already busy with other things the CPU can decide to interleave smaller tasks with other operations happening on the CPU so all programs make a reasonable amount of progress concurrently without hanging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work stealing&lt;/strong&gt; can be considered a subset of scheduling. Fork/join implements a work-stealing technique when scheduling tasks that can be broadly described as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fork/join framework is distinct because it uses a work-stealing algorithm. Worker threads that run out of things to do can steal tasks from other threads that are still busy.&lt;/p&gt;

&lt;p&gt;— &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&#34;&gt;http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The fork/join framework is mostly abstracted away from Play developers, but it’s helpful to understand how it works when tuning Play for performance.&lt;/p&gt;

&lt;p&gt;Parallelism building blocks in fork/join are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt; — An instance of this class is used to run all of your fork-join tasks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecursiveTask&amp;lt;V&amp;gt;&lt;/code&gt; — Run a subclass of this in a pool and have it return a result&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecursiveAction&lt;/code&gt; — Run a subclass of this in a pool but without returning a result&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ForkJoinTask&amp;lt;V&amp;gt;&lt;/code&gt; — Superclass of RecursiveTask&amp;lt;V&amp;gt; and RecursiveAction; fork and join are methods defined in this class&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;actions-and-futures&#34;&gt;Actions and Futures&lt;/h3&gt;

&lt;p&gt;The core of the developer experience in Play are &lt;em&gt;actions&lt;/em&gt;, which are tasks that are executed when an incoming request is routed to that action based on URI matching. An action can be defined as synchronous or asynchronous.&lt;/p&gt;

&lt;p&gt;Because Play is built on top of Scala, a hybrid object/functional programming language, actions themselves are simply anonymous functions that return an &lt;code&gt;HttpResponse&lt;/code&gt; (synchronous) or a &lt;code&gt;Future[HttpResponse]&lt;/code&gt; (asynchronous).&lt;/p&gt;

&lt;p&gt;The following action definition is synchronous:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;def&lt;/span&gt; joinGame &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;=&lt;/span&gt; Action { &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;implicit&lt;/span&gt; request &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt;
    Ok(...)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following is asynchronous:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;def&lt;/span&gt; joinGame &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;=&lt;/span&gt; Action.async { &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;implicit&lt;/span&gt; request &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt;
    Future(Ok(...))
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we build Play applications, under the hood we can consider a &lt;code&gt;Future&lt;/code&gt; to be an abstraction on top of &lt;code&gt;ForkJoinTask&amp;lt;V&amp;gt;&lt;/code&gt;. Understanding this fact becomes important when creating and tuning new &lt;em&gt;execution contexts&lt;/em&gt;. In the above code, we can see that an async action roughly maps to a &lt;code&gt;RecursiveAction&lt;/code&gt; that is executed asynchronously on a &lt;code&gt;ForkJoinPool&lt;/code&gt;, whereas a synchronous action is a simple thread that is executed on a thread pool.&lt;/p&gt;

&lt;p&gt;The syntactic difference is subtle but the runtime difference is profound. If we do not declare our actions as async, Play does not leverage fork/join; it assigns a thread to the lifecycle of the request and performs all subtasks synchronously. In situations where you may be tempted to pin a request to a thread in this fashion, you’re almost always better moving that work to Akka where you have significantly more options for customizing the way work is performed.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Play itself is the perfect technology to use as a stateless API gateway or RESTful API layer. It also integrates very well with front-end technologies such as AngularJS and React. Although it comes with support for rendering HTML out of the box, that&amp;rsquo;s a convenience; Play is perfectly suited to serving JSON and XML without HTML. Consider HTML rendering as a nice — but non-essential — facet of the Play experience.&lt;/p&gt;

&lt;p&gt;What makes Play such a solid technology in front of waves of traffic is the concurrency model. No containers to deploy to. Ultimate flexibility of the deployment model.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>